# parameters values will be passed from the main/parent yaml template.
parameters:
  poolName: ''
  environment: ''
  backendServiceArm: ''
  environmentDisplayName: ''
  # backendAzureRmResourceGroupName: ''
  # backendAzureRmStorageAccountName: ''
  # backendAzureRmContainerName: ''
  backendAzureRmKeyFilname: ''  # This is an outPut file name
  workingDirectory: ''
  terraVersion: ''
  anyTfChanges: false 
  variableGroupName: ''
  # vmImage: ''
  spn: ''
  tenantid: ''
  clientSecret: ''
  dependsOn: []
  

stages: 
  - stage: '${{ parameters.environment }}'
    variables:
    - group: '${{ parameters.variableGroupName }}' 
    jobs:
    - deployment: '${{ parameters.environment }}'
      displayName: 'Deploy to ${{ parameters.environmentDisplayName }}'
      #dependsOn: ${{ parameters.dependsOn  }}
      pool:
        name: '${{ parameters.poolName }}'
      # container: ${{ parameters.container }} 
      # creates an environment if it doesn't exist
      environment: '${{ parameters.environment }}'
      strategy:
        runOnce:
          deploy:
            steps:
            - checkout: self
            - bash: |
                set -eu  # fail on error
                az login --service-principal -u $(${{ parameters.spn }}) -p $(${{ parameters.clientSecret }}) --tenant $(${{ parameters.tenantid }})
                
                export ARM_CLIENT_ID=$(dtSandBoxSPTerraSpnID)
                export ARM_CLIENT_SECRET=$(dtSandBoxSPTerraClientSecret) 
                export ARM_TENANT_ID=$(dtSandBoxTenantsID)  
                export ARM_SUBSCRIPTION_ID=$(dtSandBoxSubscriptionID)     
                echo 'shashi : '$ARM_SUBSCRIPTION_ID 
                #terraform init   
                echo '####### START OF Terraform Init ########'
                terraform init 
                echo '#######START IF Terraform Plan ########'
                terraform plan -out=${{ parameters.backendAzureRmKeyFilname }}
                echo '#######END OF Terraform Plan ########'
                ls -ltrh 
                echo 'printing the pwd now '
                pwd
                echo '####### Working on detecting any terraform resoure modifications in the plan ########'
                
                
                result=$(terraform show -json ${{ parameters.backendAzureRmKeyFilname }}  | grep -Eio 'create|delete|update')
                echo $result  
                if [[ -n "$result" ]]; then
                      echo "Terraform will perform the following actions :"
                else
                      echo "There is no change detected in Terraform tfplan file:"                      
                fi 
                echo $result
                echo '####### COMPELTE THE TERRAFORM PROCESS #######'
              displayName: 'Terra init, plan, apply is started for ENV: ${{ parameters.environment }}'  
              workingDirectory: '${{ parameters.workingDirectory }}'                                        
            
            # - script: |
            #     echo Hello, Getting ready for terrafr! for ${{ parameters.environment }} Enviroment
            #   displayName: 'Starting Terra Engining ....${{ parameters.environment }}'

            # - script: dir
            #   workingDirectory: '${{ parameters.workingDirectory }}'
            #   displayName: 'Changing working folder'
            # - bash: |
            #     whoami
            #     echo ls-command
            #     ls -ltrh
            #   displayName: 'Some bash test-1'  
            # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
            #   displayName: 'Install Terraform Version - : ${{ parameters.terraVersion }}'
            #   inputs:
            #     terraformVersion: ${{ parameters.terraVersion }} 
            # - bash: |
            #     whoami
            #     echo ls-command
            #     ls -ltrh         
            #     echo 'shashi client id SPN' $(dtSandBoxSPTerraSpnID)       
            #     # su root
            #     # whoami
            #     # apt-get update
            #     # apt-get install unzip 
            #   displayName: 'SOME bash test-1'   
            #   workingDirectory: '${{ parameters.workingDirectory }}'            
            
            
            
            
            # - task: replacetokens@3
            #   displayName: 'Tokens Replacements'
            #   inputs:
            #     rootDirectory: '${{ parameters.workingDirectory }}/env/'
            #     targetFiles: '**/*.tfvars'
            #     encoding: 'auto'
            #     writeBOM: true
            #     actionOnMissing: 'warn'
            #     keepToken: false
            #     tokenPrefix: '#{'
            #     tokenSuffix: '}#'
            #     useLegacyPattern: false
            #     enableTransforms: false
            #     enableTelemetry: true
            # SHASHI do not remove kye-valut code (For now its used from DevOps variables for eazy acess)
            # - task: AzureKeyVault@1
            #   inputs:
            #     azureSubscription: 'sp-$(environment)'
            #     KeyVaultName: 'keyvault-dev-portal-test-$(environment)'
            #     SecretsFilter: '*'
            #     # RunAsPreJob: true

            # # # - task: TerraformInstaller@0
            # # #   displayName: 'Terraform Install on ${{ parameters.environment }} Environment ver :: ${{ parameters.terraVersion }}'
            # # #   inputs:
            # # #     terraformVersion: ${{ parameters.terraVersion }}
            # # #     # workingDirectory: '${{ parameters.workingDirectory }}'
            # # # - task: AzureCLI@2
            # # #   displayName: 'Terraform Phases Init,Plan,Validate,Apply for ${{ parameters.environment }} Environment'
            # # #   inputs:
            # # #     azureSubscription: ${{ parameters.backendServiceArm }}
            # # #     addSpnToEnvironment: true
            # # #     scriptType: 'bash'
            # # #     scriptLocation: 'inlineScript'
            # # #     inlineScript: |               
            # # #       echo 'Changing the folder ${{ parameters.workingDirectory }}'
            # # #       cd ${{ parameters.workingDirectory }}
            # # #       echo ####### az login ENV : ${{ parameters.environment }} ######## 
            # # #       #az login --service-principal -u $(client_idtSandBoxSPTerraSpnID) -p $(dtSandBoxSPTerraClientSecret) --tenant $(dtSandBoxTenantsID)
            # # #       export ARM_CLIENT_ID=$(client_idtSandBoxSPTerraSpnID)
            # # #       export ARM_CLIENT_SECRET=$(dtSandBoxSPTerraClientSecret) 
            # # #       export ARM_TENANT_ID=$(dtSandBoxTenantsID)  
            # # #       export ARM_SUBSCRIPTION_ID=$(dtSandBoxSubscriptionID) 
            # # #       echo '####### START OF Terraform Init ########'
            # # #       terraform init -var-file=env/${{ parameters.environment }}.tfvars
            # # #       echo '#######START IF Terraform Plan ########'
            # # #       terraform plan -var-file=env/${{ parameters.environment }}.tfvars -out=${{ parameters.backendAzureRmKeyFilname }}
            # # #       echo '#######END OF Terraform Plan ########'

            # # #       # echo '####### Detect any terraform resoure modifications in the plan ########'
            # # #       # result = $(terraform show -json ${{ parameters.backendAzureRmKeyFilname }} | grep -Eio 'create|delete|update')
            # # #       # echo $result
            # # #       # if test -z "$result" 
            # # #       # then
            # # #       #       echo "Terraform will perform the following actions : \$result`"
            # # #       # else
            # # #       #       echo "There is no change detected in Terraform tfplan file \$result`"
            # # #       # fi
            # # # # - task: ManualIntervention@8
            # # # #   inputs:
            # # # #     instructions: 'Please approve'
            # # # #     emailRecipients: '@.com'  
            # # # # - task: ManualValidation@0
            # # # #   timeoutInMinutes: 10 # task times out in 1 day
            # # # #   inputs:
            # # # #     notifyUsers: |
            # # # #       '@.com'
            # # # #     instructions: 'Please validate the build configuration and resume'
            # # # #     onTimeout: 'resume'                                
            # # # # Linux
            # # # - bash: |
            # # #     export ARM_CLIENT_ID=$(client_id)
            # # #     export ARM_CLIENT_SECRET=$(client_secret) 
            # # #     export ARM_TENANT_ID=$(tenant_id)  
            # # #     export ARM_SUBSCRIPTION_ID=$(subscription_id_MSDN_D) 
            # # #     cd ${{ parameters.workingDirectory }}
            # # #     result=$(terraform show -json ${{ parameters.backendAzureRmKeyFilname }} | grep -Ewio 'create|delete|update')
            # # #     echo "Results:::"
            # # #     echo "$result"
            # # #     if [[ $result ]];  
            # # #     then
            # # #       echo "Terraform will perform the following actions : \$result"
            # # #       echo "##vso[task.setvariable variable=anyTfChanges;]true" # Shashi Not Used in next Task but do not delete this line                                 
            # # #       echo "<--- ####### APPLY PROCESS BEGIN  #####--->>"
            # # #       # terraform apply ${{ parameters.backendAzureRmKeyFilname }}
            # # #       echo "Shashi Commented for now"
            # # #       echo "<--- ####### APPLY PROCESS END  #####--->>"
            # # #     else
            # # #       echo "There is no change detected in Terraform ${{ parameters.backendAzureRmKeyFilname }} file \$result"
            # # #     fi
            # # #   condition: eq( variables['Agent.OS'], 'Linux' )
            # # #   displayName: Apply only if any change detected in Terraform file ${{ parameters.backendAzureRmKeyFilname }} file
            
            
#             ########  START TILL HERE WORKING STAGE--
#   - stage: 'Deploy_${{ parameters.environment }}'  # name of the stage (A-Z, a-z, 0-9, and underscore)
#     displayName: "Shashi_22"  # friendly name to display in the UI
#     # dependsOn: string | [ string ]
#     # condition: eq(variables.anyTfChanges, true)
#     # variables: # several syntaxes, see specific section
#     jobs:
#   # track deployments on the environment
#     - deployment: 'Deploy_${{ parameters.environment }}'
#       displayName: 'Deploy_ to ${{ parameters.environmentDisplayName }}'
#       pool:
#         vmImage: '${{ parameters.vmImage }}'
#       container: registry.hub.docker.com/library/ubuntu:latest 
#       #container: ${{ parameters.container }}  
#       # creates an environment if it doesn't exist
#       environment: 'Deploy_${{ parameters.environment }}'
#       strategy:
#         # default deployment strategy, more coming...
#         runOnce:
#           deploy:
#             steps:  
#             # - checkout: self 
#             # - task: ManualValidation@0
#             #   timeoutInMinutes: 15 # task times out in 1 day
#             #   inputs:
#             #     notifyUsers: |
#             #       @.com
#             #     instructions: 'Please validate the build configuration and resume'
#             #     onTimeout: 'resume'     
#             - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
#               displayName: 'Shashi Shashi Install Terraform'
#               inputs:
#                 terraformVersion: ${{ parameters.terraVersion }}                   
#             - bash: |
#                 export ARM_CLIENT_ID=$(client_id)
#                 export ARM_CLIENT_SECRET=$(client_secret) 
#                 export ARM_TENANT_ID=$(tenant_id)  
#                 export ARM_SUBSCRIPTION_ID=$(subscription_id_MSDN_D) 
#                 cd ${{ parameters.workingDirectory }}
#                 result=$(terraform show -json ${{ parameters.backendAzureRmKeyFilname }} | grep -Ewio 'create|delete|update')
#                 echo "Results:::"
#                 echo "$result"
#                 echo "pwd coming"
#                 pwd
#                 echo "ls coming"
#                 ls -ltrh
                

# ########  END TILL HERE WORKING STAGE--





            # Windows
            # - powershell: |
            #     cd ${{ parameters.workingDirectory }}
            #     $plan = $(terraform show -json ${{ parameters.backendAzureRmKeyFilname }} | ConvertFrom-Json)
            #     $actions = $plan.resource_changes.change.actions
            #     Write-Host "Terraform actions : $actions"
            #     if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
            #     {
            #       Write-Host "Terraform will perform the following actions : $actions"
            #       Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
            #     }
            #     else
            #     {
            #       Write-Host "There is no change detected in Terraform tfplan file"
            #     }
            #   condition: eq( variables['Agent.OS'], 'Linux' )
            #   displayName: Shashi on Windows but Linux


      
      #  $Env:<variable-name> = "<new-value>"

##########################
##########################

# stages:

# - stage: ${{ parameters.environment }}
#   displayName: Deploy to ${{ parameters.environmentDisplayName }}
#   dependsOn: ${{ parameters.dependsOn  }}
#   jobs:
#   - job: Terraform_Plan
#     displayName: Terraform Init, Plan & Apply
#     pool:
#       vmImage: ${{ parameters.vmImage }}

#     steps:
#     - task: TerraformInstaller@0
#       displayName: install Terraform v${{ parameters.terraVersion }}
#       inputs:
#         terraformVersion: ${{ parameters.terraVersion }}
#     - task: replacetokens@3
#       inputs:
#         rootDirectory: '${{ parameters.workingDirectory }}/env/'
#         targetFiles: '**/*.tfvars'
#         encoding: 'auto'
#         writeBOM: true
#         actionOnMissing: 'warn'
#         keepToken: false
#         tokenPrefix: '#{'
#         tokenSuffix: '}#'
#         useLegacyPattern: false
#         enableTransforms: false
#         enableTelemetry: true
#     - task: AzureCLI@2
#       displayName: Shashi Some VISUAL DISPLAY
#       inputs:
#         azureSubscription: ${{ parameters.backendServiceArm }}
#         addSpnToEnvironment: true
#         scriptType: 'bash'
#         scriptLocation: 'inlineScript'
#         inlineScript: |
#           # Shashi Shashi Shashi
#           echo "Shashi(backendServiceArm):  ${{ parameters.backendServiceArm }}"
#           echo "Shashi(Terraform version now):   ${{ parameters.terraVersion }}"
#           echo "Shashi Terra Working folder: ${{ parameters.workingDirectory }}"
#           echo "Shashi Terra Workong Default folder: $(System.DefaultWorkingDirectory)"
#           echo "Shashi ARM_CLIENT_ID: $(ARM-CLIENT-ID)"
#           echo "Shashi ARM_SUBSCRIPTION_ID: $(ARM-SUBSCRIPTION-ID)"
          
#           cd ${{ parameters.workingDirectory }}
#           echo " Shashi now ls command now...."
#           ls -ltrh
#           ls -ltrh ${{ parameters.workingDirectory }}
#           cd env
#           cat dev.tfvars        
#     - task: AzureCLI@2
#       displayName: Terraform Init from Bash command AzureCli task
#       inputs:    
#         azureSubscription: ${{ parameters.backendServiceArm }}
#         addSpnToEnvironment: true
#         scriptType: 'bash'
#         scriptLocation: 'inlineScript'        
#         inlineScript: |
#           echo "Changing the folder $(TerraWorkingFolder)"
#           cd ${{ parameters.workingDirectory }}
#           echo #######Terraform Init for ENV : ${{ parameters.environment }} ######## 
#           #az login --service-principal -u $(ARM-CLIENT-ID) -p $(ARM-CLIENT-SECRET) --tenant $(ARM-TENANT-ID)
#           echo '####### START OF Terraform Init ########'
#           export ARM_CLIENT_ID=$(client_id)
#           export ARM_CLIENT_SECRET=$(client_secret) 
#           export ARM_TENANT_ID=$(tenant_id)  
#           export ARM_SUBSCRIPTION_ID=$(subscription_id_MSDN_D) 

#           # echo 'Final show : $ARM_CLIENT_ID'    
#           terraform init -var-file=env/${{ parameters.environment }}.tfvars
#           echo '####### END OF Terraform Init ########'

#           echo #######Terraform Plan for ENV : ${{ parameters.environment }} ######## 
#           echo '####### START OF Terraform Init ########'
#           terraform plan -var-file=env/${{ parameters.environment }}.tfvars -out=${{ parameters.backendAzureRmKeyFilname }}
#           echo '####### END OF Terraform plan ########'

#     # - task: TerraformTaskV1@0 addSpnToEnvironment
#     #   displayName: terraform init with Azure backend
#     #   inputs:
#     #     provider: 'azurerm'
#     #     command: 'init'
#     #     commandOptions: '-var-file=env/${{ parameters.environment }}.tfvars'
#     #     workingDirectory: ${{ parameters.workingDirectory }}
#     #     backendServiceArm: ${{ parameters.backendServiceArm }}
#     #     backendAzureRmResourceGroupName: ${{ parameters.backendAzureRmResourceGroupName }}
#     #     backendAzureRmStorageAccountName: ${{ parameters.backendAzureRmStorageAccountName }}
#     #     backendAzureRmContainerName: ${{ parameters.backendAzureRmContainerName }}
#     #     backendAzureRmKey: ${{ parameters.backendAzureRmKeyFilname }}
#     - task: AzureCLI@2
#       displayName: Terraform Plan from Bash command AzureCli task
#       inputs:    
#         azureSubscription: ${{ parameters.backendServiceArm }}
#         addSpnToEnvironment: true
#         scriptType: 'bash'
#         scriptLocation: 'inlineScript'        
#         inlineScript: |
#           echo #######Terraform Plan for ENV : ${{ parameters.environment }} ######## 
#           echo '####### START OF Terraform Init ########'
#           cd ${{ parameters.workingDirectory }}
#           terraform plan -var-file=env/${{ parameters.environment }}.tfvars -out=${{ parameters.backendAzureRmKeyFilname }}
#           echo '####### END OF Terraform plan ########'

#     - task: TerraformTaskV1@0
#       displayName: terraform plan -var environment=${{ parameters.environment }} -out=${{ parameters.backendAzureRmKeyFilname }}
#       inputs:
#         provider: 'azurerm'
#         addSpnToEnvironment: true
#         command: 'plan'
#         workingDirectory: ${{ parameters.workingDirectory }}
#         commandOptions: '-var-file=env/${{ parameters.environment }}.tfvars -var environment=${{ parameters.environment }} -out=${{ parameters.backendAzureRmKeyFilname }}'
#         environmentServiceNameAzureRM: ${{ parameters.backendServiceArm }}
    
#     - task: PowerShell@2
#       displayName: Detect any terraform change in the plan
#       inputs:
#         workingDirectory: ${{ parameters.workingDirectory }}
#         targetType: 'inline'
#         script: |
#           $plan = $(terraform show -json ${{ parameters.backendAzureRmKeyFilname }} | ConvertFrom-Json)
#           $actions = $plan.resource_changes.change.actions
#           Write-Host "Terraform actions : $actions"
#           if (($actions -contains 'create') -or ($actions -contains 'delete') -or ($actions -contains 'update'))
#           {
#             Write-Host "Terraform will perform the following actions : $actions"
#             Write-Host "##vso[task.setvariable variable=anyTfChanges;]true"
#           }
#           else
#           {
#             Write-Host "There is no change detected in Terraform tfplan file"
#           }
    
#     - task: TerraformTaskV1@0
#       displayName: terraform apply ${{ parameters.backendAzureRmKeyFilname }}
#       condition: eq(variables.anyTfChanges, true)
#       inputs:
#         provider: 'azurerm'
#         command: 'apply'
#         workingDirectory: ${{ parameters.workingDirectory }}
#         commandOptions: ${{ parameters.backendAzureRmKeyFilname }}
#         environmentServiceNameAzureRM: ${{ parameters.backendServiceArm }}


#     # - task: replacetokens@3
#     #   inputs:
#     #     rootDirectory: '${{ parameters.workingDirectory }}/env/'
#     #     targetFiles: '**/*.tfvars'
#     #     encoding: 'auto'
#     #     writeBOM: true
#     #     actionOnMissing: 'warn'
#     #     keepToken: false
#     #     tokenPrefix: '#{'
#     #     tokenSuffix: '}#'
#     #     useLegacyPattern: false
#     #     enableTransforms: false
#     #     enableTelemetry: true

                  # echo '####### Detect any terraform resoure modifications in the plan ########'
                  # result = $(terraform show -json ${{ parameters.backendAzureRmKeyFilname }} | grep -Eio 'create|delete|update')
                  # echo $result
                  # if [ -z "$result" ]; 
                  # then
                  #       echo "Terraform will perform the following actions : \$result`"
                  # else
                  #       echo "There is no change detected in Terraform tfplan file \$result`"
                  # fi


                  # Commands
                  # terraform init -var-file=env/backend.tfvars
                  # terraform plan -var-file=env/backend.tfvars -out=tfplanShashi 
